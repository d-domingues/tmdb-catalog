{"version":3,"file":"tmdb.api.js","sourceRoot":"","sources":["../../src/tmdb.api.ts"],"names":[],"mappings":"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","sourcesContent":["import { AccountStates } from '../models/account-states.js';\r\nimport { HomePageVM } from '../models/home-page-vm.js';\r\nimport { TmdbMovie } from '../models/tmdb-movie.js';\r\n\r\nconst api_key = Object.freeze('a7aed79b85b4769070e70428a435f4bb');\r\nconst headers = Object.freeze({\r\n  Accept: 'application/json',\r\n  'Content-Type': 'application/json',\r\n});\r\n\r\nlet session_id = '';\r\n\r\n(async () => {\r\n  const params = new URLSearchParams({ api_key }).toString();\r\n\r\n  const { request_token } = await fetch(\r\n    `https://api.themoviedb.org/3/authentication/token/new?${params}`\r\n  ).then(resp => resp.json());\r\n\r\n  await fetch(`https://api.themoviedb.org/3/authentication/token/validate_with_login?${params}`, {\r\n    method: 'POST',\r\n    headers,\r\n    body: JSON.stringify({\r\n      username: 'David_Lopes',\r\n      password: 'Th3M0v13DB',\r\n      request_token,\r\n    }),\r\n  });\r\n\r\n  const response = await fetch(\r\n    `https://api.themoviedb.org/3/authentication/session/new?${params}`,\r\n    {\r\n      method: 'POST',\r\n      headers,\r\n      body: JSON.stringify({ request_token }),\r\n    }\r\n  ).then(resp => resp.json());\r\n\r\n  session_id = response.session_id;\r\n})();\r\n\r\nexport async function fetchDiscoverMovies() {\r\n  const date = new Date();\r\n  const today = date.toJSON();\r\n  date.setMonth(date.getMonth() - 3);\r\n  const threeMontsAgo = date.toJSON();\r\n\r\n  try {\r\n    const params = new URLSearchParams({\r\n      api_key,\r\n      'release_date.gte': threeMontsAgo,\r\n      'release_date.lte': today,\r\n      sort_by: 'popularity.desc',\r\n      include_adult: 'false',\r\n      include_video: 'false',\r\n    }).toString();\r\n\r\n    const req = await fetch(`https://api.themoviedb.org/3/discover/movie?${params}`);\r\n    const { results } = await req.json();\r\n    return results;\r\n  } catch (error) {\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function fetchDiscoverTvShows() {\r\n  const date = new Date();\r\n  const today = date.toJSON();\r\n  date.setMonth(date.getMonth() - 3);\r\n  const threeMontsAgo = date.toJSON();\r\n\r\n  try {\r\n    const params = new URLSearchParams({\r\n      api_key,\r\n      'air_date.gte': threeMontsAgo,\r\n      'air_date.lte': today,\r\n      sort_by: 'popularity.desc',\r\n    }).toString();\r\n\r\n    const req = await fetch(`https://api.themoviedb.org/3/discover/tv?${params}`);\r\n    const { results } = await req.json();\r\n    return results;\r\n  } catch (error) {\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function fechHomePageData(): Promise<HomePageVM> {\r\n  const [movies, shows] = await Promise.all([fetchDiscoverMovies(), fetchDiscoverTvShows()]);\r\n\r\n  return {\r\n    carousel: [...movies.splice(0, 2), ...shows.splice(0, 2)],\r\n    recentMovies: movies.splice(0, 5),\r\n    tvShows: shows.splice(0, 5),\r\n  };\r\n}\r\n\r\nexport async function fetchSearchMovies(query: string, page = 1) {\r\n  try {\r\n    const params = new URLSearchParams({\r\n      query,\r\n      api_key,\r\n      include_adult: 'false',\r\n      sort_by: 'popularity.desc',\r\n      page: `${page}`,\r\n    }).toString();\r\n\r\n    const req = await fetch(`https://api.themoviedb.org/3/search/movie?${params}`);\r\n    const { results } = await req.json();\r\n    return results;\r\n  } catch (error) {\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function fetchSearchTv(query: string, page = 1) {\r\n  try {\r\n    const params = new URLSearchParams({\r\n      query,\r\n      api_key,\r\n      include_adult: 'false',\r\n      sort_by: 'popularity.desc',\r\n      page: `${page}`,\r\n    }).toString();\r\n\r\n    const req = await fetch(`https://api.themoviedb.org/3/search/tv?${params}`);\r\n    const { results } = await req.json();\r\n    return results;\r\n  } catch (error) {\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function fetchSearchMulti(query: string) {\r\n  try {\r\n    const params = new URLSearchParams({\r\n      query,\r\n      api_key,\r\n      indexes: 'movies.en,tv_series.en',\r\n    }).toString();\r\n\r\n    const req = await fetch(`https://api.themoviedb.org/3/search/multi?${params}`);\r\n    const { results } = await req.json();\r\n    return results;\r\n  } catch (error) {\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function getDetails(type: 'movie' | 'tv', movie_id: number, language = 'es-ES') {\r\n  try {\r\n    const params = new URLSearchParams({\r\n      api_key,\r\n      append_to_response: 'credits,release_dates,', // 'videos,images,',\r\n      language,\r\n    }).toString();\r\n\r\n    const req = await fetch(`https://api.themoviedb.org/3/${type}/${movie_id}?${params}`);\r\n    return req.json();\r\n  } catch (error) {\r\n    return {} as TmdbMovie;\r\n  }\r\n}\r\n\r\nexport async function markAsFavorite(\r\n  media_type: 'movie' | 'tv',\r\n  media_id: number,\r\n  favorite: boolean\r\n) {\r\n  const params = new URLSearchParams({ session_id, api_key }).toString();\r\n\r\n  return fetch(`https://api.themoviedb.org/3/account/{account_id}/favorite?${params}`, {\r\n    method: 'POST',\r\n    headers,\r\n    body: JSON.stringify({ media_type, media_id, favorite }),\r\n  }).then(resp => resp.json());\r\n}\r\n\r\nexport async function getAccountStates(\r\n  media_type: 'movie' | 'tv',\r\n  media_id: number\r\n): Promise<AccountStates> {\r\n  const params = new URLSearchParams({ session_id, api_key }).toString();\r\n\r\n  return fetch(\r\n    `https://api.themoviedb.org/3/${media_type}/${media_id}/account_states?${params}`\r\n  ).then(resp => resp.json());\r\n}\r\n"]}